{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","state","charData","chartData","className","data","this","width","height","options","displayTitle","displayLegend","legendPosition","maintainAspectRatio","Button","variant","color","Component","defaultProps","App","responseData","getChartData","axios","get","then","res","setState","console","log","Items","average","S","labels","datasets","label","backgroundColor","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAQqBA,E,YAGnB,WAAYC,GAAQ,IAAD,8BACjB,+CACKC,MAAQ,CACXC,SAAUF,EAAMG,WAHD,E,sEAab,OAAS,yBACDC,UAAY,SAChB,kBAAC,IAAD,CAAKC,KAASC,KAAKL,MAAMC,SACzBK,MAAU,IACVC,OAAW,IACTC,SAEeH,KAAKN,MAAMU,aAKXJ,KAAKN,MAAMW,cACVL,KAAKN,MAAMY,eAG1B,CAAEC,qBAAqB,MAExB,gCAAQ,6BACN,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,gB,GAnCmBC,aAAdlB,EASZmB,aAAe,CACpBR,cAAc,EACdC,eAAe,EACfC,eAAgB,S,qBCyCLO,E,YAxDb,aAAc,IAAD,8BACX,+CACKlB,MAAQ,CACXE,UAAW,GACXiB,aAAc,IAJL,E,kFAQXd,KAAKe,iB,qCAGS,IAAD,OAEbC,IAAMC,IAAN,8CACCC,MAAM,SAAAC,GAEL,EAAKC,SAAS,CAAEN,aAAcK,EAAIpB,OAClCsB,QAAQC,IAAI,EAAK3B,MAAMmB,aAAaS,MAAM,GAAGC,QAAQC,MAGvDzB,KAAKoB,SAAS,CACZvB,UAAW,CACT6B,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAQ,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACtHC,SAAU,CACR,CACEC,MAAO,mBACP7B,KAAM,CAAC,EAAE,EACP,EAAG,EAAG,EAAG,GAAI,GAAI,EAAE,EAAG,EAAG,EAAG,EAAG,GACjC8B,gBAAiB,CACf,0BACA,0BACA,0BACA,2BACA,0BACA,uBACA,0BACA,0BACA,0BACA,2BACA,0BACA,+B,+BASV,OACE,yBAAK/B,UAAY,OACf,kBAAC,EAAD,CAAOD,UAAWG,KAAKL,MAAME,UAAWS,eAAe,gB,GApD7CwB,IAAMnB,WCQJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.1e1957f3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Bar, Line, Pie } from 'react-chartjs-2'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport default class Chart extends Component {\r\n\r\n\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      charData: props.chartData\r\n    }\r\n  }\r\n  static defaultProps = {\r\n    displayTitle: true,\r\n    displayLegend: true,\r\n    legendPosition: 'right'\r\n  };\r\n\r\n    render() {\r\n        return ( <\r\n            div className = \"chart\" >\r\n            <Bar data = { this.state.charData }\r\n            width = { 800 }\r\n            height = { 500 }\r\n              options = {{\r\n                  title: {\r\n                    display: this.props.displayTitle,\r\n                    text: 'Detected Persons',\r\n                    fontSize: 20\r\n                  },\r\n                  legend: {\r\n                    display: this.props.displayLegend,\r\n                    position: this.props.legendPosition\r\n                  }\r\n\r\n            }, { maintainAspectRatio: false }}\r\n            />\r\n              <center><br/>\r\n                <Button variant=\"contained\" color=\"primary\">Update</Button>\r\n              </center>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport Chart from './components/Chart'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      chartData: {},\n      responseData: []\n    }\n  }\n  componentWillMount() {\n    this.getChartData()\n  }\n\n  getChartData() {\n    // Ajax Calls here\n    axios.get(`https://www.eyemotion.me/chart/export.json`)\n    .then( res => {\n//      console.log(res.data.Items)\n      this.setState({ responseData: res.data })\n      console.log(this.state.responseData.Items[0].average.S)\n    })\n\n    this.setState({\n      chartData: {\n        labels: ['January', 'February', 'March', 'April','May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        datasets: [\n          {\n            label: 'Detected Persons',\n            data: [1,2,\n              5, 8, 2, 10, 12, 2,2, 5, 7, 3, 9],\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.6)',\n              'rgba(54, 162, 235, 0.6)',\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(153, 102, 255, 0.6)',\n              'rgba(56, 150, 132, 0.6)',\n              'rgba(2, 63, 98, 0.6)',\n              'rgba(255, 99, 132, 0.6)',\n              'rgba(54, 162, 235, 0.6)',\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(153, 102, 255, 0.6)',\n              'rgba(56, 150, 132, 0.6)',\n              'rgba(2, 63, 98, 0.6)',\n            ]\n          }\n        ]\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className = \"App\" >\n        <Chart chartData={this.state.chartData} legendPosition=\"bottom\"/>\n      </div>\n    );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}